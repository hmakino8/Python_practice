{"ast":null,"code":"var _jsxFileName = \"/Users/hiroaki/github.com/Python_practice/todo-env/frontend/src/components/TasksComplete.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { IconArrowDown, IconArrowRight } from \"./Icon\";\nimport { Task } from \"./Task\";\nimport styles from \"./styles/TasksComplete.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TasksComplete = props => {\n  _s();\n  const {\n    list,\n    setTasks,\n    setListGroup,\n    modalData,\n    setModalData,\n    setIsModalOpen,\n    countTaskComplete\n  } = props;\n  const [isVisible, setIsVisible] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ButtonToggleTasksComplete, {\n      count: countTaskComplete,\n      isVisible: isVisible,\n      setIsVisible: setIsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), isVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.wrapper,\n      children: list.tasks.filter(task => task.isComplete).map(taskIncomplete => /*#__PURE__*/_jsxDEV(Task, {\n        task: taskIncomplete,\n        setTasks: setTasks,\n        setListGroup: setListGroup,\n        modalData: modalData,\n        setModalData: setModalData,\n        setIsModalOpen: setIsModalOpen,\n        isMoreVertOnList: true\n      }, taskIncomplete.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(TasksComplete, \"QjDZesRvLCmcrZLxgN677nXnVLA=\");\n_c = TasksComplete;\nconst ButtonToggleTasksComplete = ({\n  count,\n  isVisible,\n  setIsVisible\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: styles.buttonWrapper,\n  onClick: () => setIsVisible(prev => !prev),\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    className: styles.buttonToggleTasksComplete,\n    children: isVisible ? /*#__PURE__*/_jsxDEV(IconArrowDown, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(IconArrowRight, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 40\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"\\u5B8C\\u4E86\\uFF08\", count, \"\\u4EF6\\uFF09\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 3\n}, this);\n_c2 = ButtonToggleTasksComplete;\nvar _c, _c2;\n$RefreshReg$(_c, \"TasksComplete\");\n$RefreshReg$(_c2, \"ButtonToggleTasksComplete\");","map":{"version":3,"names":["useState","IconArrowDown","IconArrowRight","Task","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","TasksComplete","props","_s","list","setTasks","setListGroup","modalData","setModalData","setIsModalOpen","countTaskComplete","isVisible","setIsVisible","children","ButtonToggleTasksComplete","count","fileName","_jsxFileName","lineNumber","columnNumber","className","wrapper","tasks","filter","task","isComplete","map","taskIncomplete","isMoreVertOnList","taskId","_c","buttonWrapper","onClick","prev","buttonToggleTasksComplete","_c2","$RefreshReg$"],"sources":["/Users/hiroaki/github.com/Python_practice/todo-env/frontend/src/components/TasksComplete.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { IconArrowDown, IconArrowRight } from \"./Icon\";\nimport { Task } from \"./Task\";\nimport styles from \"./styles/TasksComplete.module.css\";\n\nexport const TasksComplete = (props) => {\n  const {\n    list,\n    setTasks,\n    setListGroup,\n    modalData,\n    setModalData,\n    setIsModalOpen,\n    countTaskComplete,\n  } = props;\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <>\n      <ButtonToggleTasksComplete\n        count={countTaskComplete}\n        isVisible={isVisible}\n        setIsVisible={setIsVisible}\n      />\n      {isVisible && (\n        <div className={styles.wrapper}>\n          {list.tasks\n            .filter((task) => task.isComplete)\n            .map((taskIncomplete) => (\n              <Task\n                key={taskIncomplete.taskId}\n                task={taskIncomplete}\n                setTasks={setTasks}\n                setListGroup={setListGroup}\n                modalData={modalData}\n                setModalData={setModalData}\n                setIsModalOpen={setIsModalOpen}\n                isMoreVertOnList={true}\n              />\n            ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst ButtonToggleTasksComplete = ({ count, isVisible, setIsVisible }) => (\n  <div\n    className={styles.buttonWrapper}\n    onClick={() => setIsVisible((prev) => !prev)}\n  >\n    <button className={styles.buttonToggleTasksComplete}>\n      {isVisible ? <IconArrowDown /> : <IconArrowRight />}\n    </button>\n    <p>完了（{count}件）</p>\n  </div>\n);\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,cAAc,QAAQ,QAAQ;AACtD,SAASC,IAAI,QAAQ,QAAQ;AAC7B,OAAOC,MAAM,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvD,OAAO,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACtC,MAAM;IACJC,IAAI;IACJC,QAAQ;IACRC,YAAY;IACZC,SAAS;IACTC,YAAY;IACZC,cAAc;IACdC;EACF,CAAC,GAAGR,KAAK;EAET,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEjD,oBACEM,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACEf,OAAA,CAACgB,yBAAyB;MACxBC,KAAK,EAAEL,iBAAkB;MACzBC,SAAS,EAAEA,SAAU;MACrBC,YAAY,EAAEA;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDR,SAAS,iBACRb,OAAA;MAAKsB,SAAS,EAAExB,MAAM,CAACyB,OAAQ;MAAAR,QAAA,EAC5BT,IAAI,CAACkB,KAAK,CACRC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,CAAC,CACjCC,GAAG,CAAEC,cAAc,iBAClB7B,OAAA,CAACH,IAAI;QAEH6B,IAAI,EAAEG,cAAe;QACrBtB,QAAQ,EAAEA,QAAS;QACnBC,YAAY,EAAEA,YAAa;QAC3BC,SAAS,EAAEA,SAAU;QACrBC,YAAY,EAAEA,YAAa;QAC3BC,cAAc,EAAEA,cAAe;QAC/BmB,gBAAgB,EAAE;MAAK,GAPlBD,cAAc,CAACE,MAAM;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQ3B,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN;EAAA,eACD,CAAC;AAEP,CAAC;AAAChB,EAAA,CAxCWF,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AA0C1B,MAAMa,yBAAyB,GAAGA,CAAC;EAAEC,KAAK;EAAEJ,SAAS;EAAEC;AAAa,CAAC,kBACnEd,OAAA;EACEsB,SAAS,EAAExB,MAAM,CAACmC,aAAc;EAChCC,OAAO,EAAEA,CAAA,KAAMpB,YAAY,CAAEqB,IAAI,IAAK,CAACA,IAAI,CAAE;EAAApB,QAAA,gBAE7Cf,OAAA;IAAQsB,SAAS,EAAExB,MAAM,CAACsC,yBAA0B;IAAArB,QAAA,EACjDF,SAAS,gBAAGb,OAAA,CAACL,aAAa;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGrB,OAAA,CAACJ,cAAc;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC,eACTrB,OAAA;IAAAe,QAAA,GAAG,oBAAG,EAACE,KAAK,EAAC,cAAE;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAChB,CACN;AAACgB,GAAA,GAVIrB,yBAAyB;AAAA,IAAAgB,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}